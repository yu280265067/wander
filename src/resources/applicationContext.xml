<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:websocket="http://www.springframework.org/schema/websocket"
	   xmlns:reg="http://www.dangdang.com/schema/ddframe/reg"
	   xmlns:job="http://www.dangdang.com/schema/ddframe/job"
	   xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.dangdang.com/schema/ddframe/reg
        http://www.dangdang.com/schema/ddframe/reg/reg.xsd
        http://www.dangdang.com/schema/ddframe/job
        http://www.dangdang.com/schema/ddframe/job/job.xsd
">
	<context:component-scan base-package="com" />

	 <aop:aspectj-autoproxy></aop:aspectj-autoproxy> 
	<!-- 折腾了半天原来这里的配置完全可以不要。。。 -->
	<!-- rest json related... start -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"> 
		<property name="messageConverters"> <list> <ref bean="mappingJacksonHttpMessageConverter" 
		/> </list> </property> </bean> <bean id="mappingJacksonHttpMessageConverter" 
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>text/html;charset=UTF-8</value> 
		</list> </property> </bean> -->
	<!-- 配置文件热部署 -->
	<bean class="com.ycx.configuration.SystemConfig">
		<property name="locations">
			<!-- file:${config.root}/app.properties -->
			<value>file:/Users/yuchengxiang/app.properties</value>
		</property>
	</bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
		<property name="maxInMemorySize" value="4096" />
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>


	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<!-- 这个配置是配置JSP页面的位置，按照你自己的配置来配 -->
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	<bean id="websocket" class="com.ycx.websocket.WebsocketEndPoint" />
	<!-- 配置junit环境 websocket抱错 故而注释，由于也junit测试无关暂不知原因 junit测试环境 ，项目在tomcat下运行正常 
		，但是junit运行会跑出很多缺包 （如aspect aop包）等异常 咱不知原因 -->
	<!-- <websocket:handlers> <websocket:mapping path="/websocket" handler="websocket"/> 
		<websocket:handshake-interceptors> <bean class="com.ycx.websocket.HandshakeInterceptor"/> 
		</websocket:handshake-interceptors> </websocket:handlers> -->


	<!-- 定义viewcontroller之后 原来的handler会不好用 必须加上driven才行 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	<!-- 下面两种方法的区别？ -->
	<mvc:view-controller path="/websocketj" view-name="websocketDemo" />
	<mvc:view-controller path="/webservice" view-name="webservice" />
	<!-- <mvc:resources location="/static/" mapping="/static/**"/> -->

	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />
	<!-- 配置数据源 -->
	<!--引入属性文件 -->
	<context:property-placeholder location="classpath*:/resources/*.properties" />
	<!--数据库连接 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> 
		<property name="driverClass"> <value>com.mysql.jdbc.Driver</value> </property> 
		<property name="jdbcUrl"> <value>${jdbc.url}</value> </property> <property 
		name="user"> <value>${jdbc.username}</value> </property> <property name="password"> 
		<value>${jdbc.password}</value> </property> 连接池中保留的最小连接数。 <property name="minPoolSize" 
		value="10" /> 连接池中保留的最大连接数。Default: 15 <property name="maxPoolSize" value="100" 
		/> 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 <property name="maxIdleTime" 
		value="1800" /> 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 <property name="acquireIncrement" 
		value="3" /> <property name="maxStatements" value="1000" /> <property name="initialPoolSize" 
		value="10" /> 每60秒检查所有连接池中的空闲连接。Default: 0 <property name="idleConnectionTestPeriod" 
		value="60" /> 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 <property name="acquireRetryAttempts" 
		value="30" /> <property name="breakAfterAcquireFailure" value="true" /> <property 
		name="testConnectionOnCheckout" value="false" /> </bean> -->
	<!--数据库连接 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- <property name="url" value="${jdbc.url}" /> <property name="username" 
			value="${jdbc.username}" /> <property name="password" value="${jdbc.password}" 
			/> -->
		<property name="url"
			value="jdbc:mysql://${mysql.url}:3306/test?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="${mysql.name}" />
		<property name="password" value="${mysql.pass}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize">
			<value>1</value>
		</property>
		<property name="maxActive">
			<value>5</value>
		</property>
		<property name="minIdle">
			<value>1</value>
		</property>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait">
			<value>60000</value>
		</property>
		<!-- 配置监控统计拦截的filters -->
		<property name="filters">
			<value>stat</value>
		</property>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis">
			<value>60000</value>
		</property>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis">
			<value>300000</value>
		</property>
	</bean>
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"> 
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property> 
		</bean> -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/ycx/mapping/*.xml"></property>
		<property name="configLocation" value="classpath:/resources/mybatis-config.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ycx.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 配置国际化资源文件 -->
	<!--<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"> 
		<property name="basename" value="i18n"> </property> </bean> -->


	<!-- <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
		<property name="maxIdle" value="10" /> <property name="maxWait" value="1000" 
		/> <property name="testOnBorrow" value="true" /> </bean> <bean id="jedis.shardInfo" 
		class="redis.clients.jedis.JedisShardInfo"> <constructor-arg index="0" value="localhost" 
		/> <constructor-arg index="1" value="6379" /> </bean> <bean id="shardedJedisPool" 
		class="redis.clients.jedis.ShardedJedisPool"> <constructor-arg index="0" 
		ref="jedisPoolConfig" /> <constructor-arg index="1"> <list> <ref bean="jedis.shardInfo" 
		/> </list> </constructor-arg> </bean> -->

	<!--<bean id="jedisPool" class="redis.clients.jedis.JedisPool"> -->
	<!--<constructor-arg index="0" ref="jedisPoolConfig" /> -->
	<!--<constructor-arg index="1" value="10.1.21.243" type="java.lang.String" 
		/> -->
	<!--<constructor-arg index="2" value="5000" type="int" /> -->
	<!--<constructor-arg index="3" value="1000" type="int" /> -->
	<!--<constructor-arg index="4" value="MKL7cOEehQf8aoIBtHxs"/> -->
	<!--</bean> -->
	<!-- <bean id = "jedisPool" class="redis.clients.jedis.JedisPool"> <constructor-arg 
		index="0" ref="jedisPoolConfig"/> <constructor-arg index="1" value="10.1.21.143 
		" type="java.lang.String"/> <constructor-arg index="2" value="5000" type="int"/> 
		<constructor-arg index="3" value="1000" type="int"/> <constructor-arg index="4" 
		value=""/> </bean> -->

	<!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> -->
	<!--<property name="maxTotal" value="10" /> -->
	<!--<property name="maxIdle" value="5" /> -->
	<!--<property name="numTestsPerEvictionRun" value="3" /> -->
	<!--<property name="minEvictableIdleTimeMillis" value="-1" /> -->
	<!--<property name="testOnBorrow" value="true" /> -->
	<!--<property name="testWhileIdle" value="true" /> -->
	<!--<property name="blockWhenExhausted" value="false" /> -->
	<!--</bean> -->
	<bean id="helloQuartzJob" class="com.ycx.quartz.HelloQuartzJob" />
	<bean id="complementJobConfig"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="helloQuartzJob" />
		<property name="targetMethod" value="run" />
	</bean>
	<bean id="complementJobTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="complementJobConfig" />
		<property name="repeatInterval" value="10000" />
		<property name="startDelay" value="1000" />
	</bean>
	<!--<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
		<!--<property name="schedulerName" value="complementSched" />-->
		<!--<property name="triggers">-->
			<!--<list>-->
				<!--<ref bean="complementJobTrigger" />-->
			<!--</list>-->
		<!--</property>-->
		<!--&lt;!&ndash; Special config for quartz &ndash;&gt;-->
		<!--<property name="quartzProperties">-->
			<!--<props>-->
				<!--<prop key="org.quartz.threadPool.threadCount">3</prop>-->
			<!--</props>-->
		<!--</property>-->
	<!--</bean>-->

	<!--configure registry center -->
	 <reg:zookeeper id="regCenter" server-lists="101.200.91.48:2181" namespace="dd-job"
					base-sleep-time-milliseconds="1000" max-sleep-time-milliseconds="3000" max-retries="3" />

	<!--configure job -->
	 <job:simple id="myElasticJob04" class="com.ycx.quartz.EsHelloJob" registry-center-ref="regCenter"
				 cron="0/10 * * * * ?"   sharding-total-count="2" sharding-item-parameters="0=A,1=B" />
 </beans>
