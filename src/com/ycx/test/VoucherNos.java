package com.ycx.test;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Set;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import com.ycx.dubbo.DemoService;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.configuration.ConfigurationBuilder;
import org.apache.commons.lang3.StringUtils;
import org.reflections.Reflections;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;

import com.mysql.fabric.xmlrpc.base.Array;

public class VoucherNos {
	public static void main1(String[] args) {
		int num = 0;
		short s = 0;
		s++;
		s+=s;
		//s=s+1;
		StringBuffer sb = new StringBuffer();
		sb.append("asd");
		StringBuilder ss = new StringBuilder();
		ss.append("sdasd");
		String ids = "101146784697751234229,101146784780940658350,101146784781270908015,101146784781760935208,101146784781979358398,101146784782048958405,101146784782153686719,101146784782169235237,101146784782648608110,101146784783169086777,101146784783507608164,101146784783618886802,101146784783718235819,101146784783727158489,101146784783789286812,101146784784773558528,101146784784983486849,101146784785356786872,101146784785368459050,101146784785577859061,101146784785844108753,101146784786012235924,101146784786086959089,101146784786237986913,101146784786764659116,101146784787174135977,101146784787295735980,101146784787768808851,101146784788094036011,101146784788257408869,101146784789149787510,101146784789179659207,101146784789850908914,101146784790349587546,101146784790425936078,101146784791408408965,101146784792875036167,101146784793416809025,101146784793497459327,101146784794473259847,101146784794548109051,101146784795505236256,101146784796049809582,101146784797632409619,101146784798783259957,101146784798826259958,101146784799624809661,101146784800260359992,101146784800556187763,101146784801640336404,101146784802528936431,101146784803859536454,101146784804521460086,101146784804691460089,101146784804694009784,101146784804831260092,101146784805184036479,101146784807097036515,101146784807367936522,101146784807697409833,101146784807739560652,101146784809215588447,101146784809799109870,101146784812348860710,101146784812361936603,101146784812407188499,101146784812430409907,101146784813515888528,101146784813654709931,101146784813853436639,101146784814025409937,101146784814093560743,101146784815191609952,101146784816221960778,101146784816409260783,101146784817687736708,101146784818142160809,101146784818362636722,101146784821564910557,101146784822180788663,101146784825060010598,101146784826184161427,101146784827946637356,101146784828099788730,101146784828852237372,101146784829330561465,101146784829927410670,101146784830450788763,101146784831574537400,101146784833106111209,101146784834608461535,101146784834716561536,101146784834939437443,101146784837163537467,101146784837180888847,101146784839402788877,101146784839606637495,101146784839796988884,101146784841170988901,101146784842352911319,101146784842755262127,101146784843622037549,101146784843815688932,101146784844302988939,101146784845007862155,101146784845542837570,101146784847381937601,101146784847743211390,101146784850255637644,101146784850849962240,101146784852651711457,101146784853195862269,101146784853565462277,101146784853808411471,101146784854980537703,101146784855501411493,101146784858345789124,101146784861506562361,101146784861865889165,101146784863647838795,101146784863684362386,101146784863700989183,101146784864740689200,101146784865150389207,101146784865758889212,101146784874536338918,101146784876437489330,101146784877103212233,101146784878036338960,101146784881713539491,101146784882536889387,101146784882565139499,101146784882773939501,101146784883094712294,101146784888139163142,101146784888332339566,101146784889906389453,101146784893020289485,101146784893436739627,101146784894781489505,101146784897151289528,101146784897183739658,101146784897437212435,101146784899280439680,101146784904834212523,101146784907028990130,101146784909517090156,101146784909625363374,101146784911828639814,101146784913168539825,101146784914450590209,101146784914948339838,101146784916657039852,101146784922607290275,101146784923573464011,101146784932675290885,101146784932718464112,101146784934205712800,101146784935823990913,101146784939237664188,101146784948907312917,101146784953019291043,101146784955206291059,101146784959544964353,101146784959966864357,101146784961273264370,101146784962531191134,101146784964696313082,101146784966472864464,101146784972897291329,101146784974472642004,101146784975107113281,101146784975251013283,101146784976925513297,101146784977070791389,101146784977634913310,101146784978639642561,101146784980881791444,101146784982555265215,101146784984131842630,101146784989319013534,101146784994285614178,101146785002991066078,101146785003840266086,101146785004242091909,101146785005169443523,101146785005319391921,101146785011393614376,101146785018341792079,101146785018472744204,101146785019799592096,101146785021733144247,101146785028150714620,101146785033194344907,101146785034253766979,101146785036645967011,101146785037835392844,101146785038028714739,101146785039419244972,101146785040413614773,101146785040575467052,101146785042953192903,101146785049055910589,101146785049583914866,101146785050396614878,101146785051963614897,101146785057625915472,101146785059366493618,101146785070017794239,101146785070105510868,101146785070323567913,101146785081571511010,101146785083583294391,101146785085834340860,101146785089174494480,101146785093957668785,101146785094792568794,101146785096664694589,101146785100974111265,101146785102167295152,101146785104697495183,101146785105234795193,101146785105974895201,101146785107117268932,101146785108848741644,101146785111334011387,101146785112944511409,101146785116123511967,101146785119220896407,101146785127337769201,101146785128444041930,101146785137473069312,101146785161375312530,101146785161510443359,101146785170229570244,101146785188310998256,101146785196326612983,101146785213624899109,101146785227348513430,101146785231234846837,101146785245025614208,101146785246512614226,101146785250839973416,101146785264841014476,101146785266181914507,101146785271688199947,101146785276224547987,101146785283137174428,101146785296523074635,101146785302976748377,101146785310024748461,101146785322116216770,101146785324857201713,101146785327388901762,101146785339368549468,101146785341110249494,101146785343708950031,101146785354347350384,101146785363383418627,101146785363532103033,101146785369141018700,101146785369528572414,101146785370448118723,101146785380656903738,101146785393824903950,101146785409683419789,101146785419439020485,101146785444211120837,101146785447965475573,101146785463253321695,101146785467187054607,101146785476348554780,101146785481238477156,101146785485408354933,101146785518556756915,101146785520700622593,101146785563409923811,101146785576166905443,101146785638396560397,101146785641834181704,101146785673603328080,101146785745350484492,101146785788624331732,101146785845172233942,101146785863955689235,101146785912448391308,101146785948292392010,101146786453758535810,101146786519430938862,101146786747084091120,101146787234147927129,101146787832365681692,101146790475749413994,101146845241606650918,101146845261108983143,101146845261193183148,101146845261195983149,101146845261539583174,101146845261676823559,101146845262483051090,101146845262487123603,101146845262823851107,101146845263267000715,101146845263365323645,101146845263661284263,101146845263863623660,101146845263998351156,101146845264365451174,101146845264521900776,101146845265037951204,101146845265761800824,101146845266365651759,101146845267476423793,101146845269013523854,101146845269054251856,101146845269419500964,101146845269830123883,101146845269855584504,101146845270717801008,101146845270879101017,101146845271705624445,101146845273587584628,101146845274221701125,101146845276228084694,101146845276565601174,101146845276698824606,101146845278769601235,101146845284463701372,101146845285684424825,101146845285972753337,101146845287893424866,101146845291027053437,101146845292156653456,101146845293003753977,101146845302761402689,101146845303937902708,101146845322651925940,101146845322995080644,101146845323536555435,101146845326643280697,101146845329589080736,101146845338891903171,101146845348204281465,101146845350617581492,101146845354955903868,101146845364328656970,101146845375894504109,101146845380331457134,101146845385605927228,101146845386175582411,101146845395355104836,101146845397099927356,101146845405829404954,101146845413046883688,101146845425351683828,101146845425732258199,101146845436644558310,101146845440447628339,101146845449670658999,101146845460933929634,101146845463219729664,101146845464604384293,101146845469582984349,101146845469609106716,101146845470382859755,101146845471188629768,101146845492838185709,101146845500443985796,101146845507958060824,101146845509864485916,101146845510718830850,101146845514035585960,101146845520705261446,101146845523164007469,101146845526649286604,101146845527541861517,101146845531512586658,101146845538096661631,101146845542670008182,101146845543750361695,101146845547144061723,101146845548337008241,101146845549088186849,101146845552497832288,101146845569565087581,101146845587766962667,101146845595179409786,101146845602580209881,101146845612550434472,101146845616353962973,101146845640723410879,101146845649801663396,101146845656297589089,101146845666106811203,101146845691926789558,101146845696690764492,101146845713339737265,101146845718258437328,101146845727003490513,101146845745890313790,101146845749430513858,101146845752471766779,101146845757111567335,101146845770289068012,101146845771826368034,101146845784474039784,101146845800470039995,101146845867023872039,101146845873157494875,101146845880572372248,101146845882171372262,101146845890304913946,101146845907473695822,101146845919409642926,101146845940591673623,101146845942344496885,101146845968189517121,101146845987665145054,101146845989614717482,101146846002151199407,101146846004006145337,101146846016756817967,101146846041094201066,101146846068322844877,101146846088031772799,101146846093609672868,101146846127860574936,101146846158500621238,101146846158917521248,101146846179809249276,101146846227136378541,101146846294238027594,101146846359716408956,101146846363974909030,101146846380311309339,101146846387825057329,101146846422050458986,101146846430564132487,101146846507808215472,101146846545888162219,101146846574834463067,101146846581913619692,101146846615659963796,101146846636917022134,101146846641201264204,101146846873580066871,101146846879567428927,101146846985033872826,101146847101344037178,101146847102788152245,101146847133092237702,101146847163935253793,101146847215059341043,101146847222852580392,101146847268030382659,101146847347835134949,101146847401624861899,101146847426298087518,101146847440567837459,101146847549736468824,101146848001104612033,101146848058838064468,101146848079693236061,101146848387099779186,101146848401680151000,101146848769552713001,101146849168961576179,101146849626730964618,101146853721766591035,101146853721774943245,101146853721831743246,101146853722185015937,101146853722586191036,101146853723922143258,101146853724865165478,101146853725477391070,101146853725728143275,101146853726261243278,101146853726384891077,101146853727211791082,101146853728712965500,101146853732181343302,101146853751803165626,101146853756063316129,101146853760507916143,101146853780376144498,101146853814592916831,101146853820163744650,101146853835364616910,101146853838292916929";
	/*	for(int i=0;i<ids.length();i++){
        	  if(ids.charAt(i)==','){
        		  num++;
        	  }
          }*/
          System.out.println(ids.replaceAll(",", "','"));
         // System.out.println(num);
	}
	
	public static void main0(String[] args) {
		ThreadPoolExecutor sliceExecutors = new ThreadPoolExecutor(2, 4, 30L, TimeUnit.SECONDS,
                new ArrayBlockingQueue<Runnable>(4),
                new ThreadPoolExecutor.CallerRunsPolicy());
		sliceExecutors.submit(new Runnable() {
			
			@Override
			public void run() {
				String ss = "10";
				Integer i = Integer.valueOf(ss);
				System.out.println("ss=="+i);
				try {
					System.out.println("thread start");
					Thread.sleep(10000);
					System.out.println("thread stop");
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		});
		sliceExecutors.shutdown();
		System.out.println("main log");
//		ApplicationContext context = new FileSystemXmlApplicationContext(
//				new String[] { "classpath:/resources/applicationContext.xml", });
		
		/*if(! false){
			System.out.println("ada");
		}*/
//		BigDecimal b1 = new BigDecimal(100.00);
//		BigDecimal b2 = new BigDecimal(1000.00);
//		System.out.println(b2.compareTo(b1));
		//compare_date(new Date(2016, 10, 13, 1, 2),new Date(2016, 10, 13, 1, 1));
	}
	
	public static int compare_date(Date now,Date dt1, Date dt2) {
      //  DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm");
        try {
            if (dt1.getTime() > dt2.getTime()) {
                System.out.println("dt1 在dt2后");
                return 1;
            } else if (dt1.getTime() < dt2.getTime()) {
                System.out.println("dt1在dt2前");
                return -1;
            } else {
                return 0;
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return 0;
    }

	private  Integer settlementTime;  //结算时间 秒数

	public Integer getSettlementTime() {
		return settlementTime;
	}

	public void setSettlementTime(Integer settlementTime) {
		this.settlementTime = settlementTime;
	}

	public static void main(String[] args) {
		Reflections reflections = new Reflections();
		Set<Class<? extends DemoService>> subTypes = reflections.getSubTypesOf(DemoService.class);
		subTypes.forEach(x->{
			String version = StringUtils.substringAfter(x.getSimpleName(), "Demo").toLowerCase();
			try {
				Method valuesMethod = x.getMethod("values");
				System.out.printf(valuesMethod.getName());
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			}
			System.out.printf(version);
		});
	}

}
